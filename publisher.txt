
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

public class Publisher {

//  set the quality of service to 2
	private static final int qos             = 2;
//	The broker url. 
	private static final    String brokerUrl = "tcp://broker.emqx.io:1883";
//  String brokerUrl       = "tcp://mqtt.eclipseprojects.io:1883";

//	 The client id. 
	private static final String clientId =MqttClient.generateClientId();
	public void publish_function(String topic,String content) {
	    MemoryPersistence persistence = new MemoryPersistence();
	    try {
	        MqttClient sampleClient = new MqttClient(brokerUrl, clientId, persistence);
	        MqttConnectOptions connOpts = new MqttConnectOptions();
	        connOpts.setCleanSession(true);
	        System.out.println("Connecting to broker: "+brokerUrl);
	        sampleClient.connect(connOpts);
	        System.out.println("Connected");
	        System.out.println("Publishing message: "+content);
	        MqttMessage message = new MqttMessage(content.getBytes());
	        message.setQos(qos);
	        sampleClient.publish(topic, message);
	        System.out.println("Message published");
	        sampleClient.disconnect();
	        System.out.println("Disconnected");
	        System.exit(0);
	    } catch(MqttException me) {
	        System.out.println("reason "+me.getReasonCode());
	        System.out.println("msg "+me.getMessage());
	        System.out.println("loc "+me.getLocalizedMessage());
	        System.out.println("cause "+me.getCause());
	        System.out.println("excep "+me);
	        me.printStackTrace();
	    }

	}
	
public static void main(String[] args) {
	
	 String myTopic  = "home1/room1";
	 String myContent   = "Message from Publisher";
	new Publisher().publish_function(myTopic,myContent);
	
}
}


    